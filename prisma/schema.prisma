// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  email         String         @unique
  password      String
  phoneNum      String?        @unique
  role          Role           @default(USER)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  onDelete      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  orders        Order[]
  wishlist      Wishlist[]
  cartItems     CartItem[]
  notifications Notification[]
  logs          Log[]          @relation("UserLogs")
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int
  image       String
  category_id String?          @db.ObjectId
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  category    Category?        @relation(fields: [category_id], references: [id], onDelete: SetNull)
  orderItems  OrderItem[]
  variants    ProductVariant[]
  images      ProductImage[]
  cartItems   CartItem[]
  wishlist    Wishlist[]
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String? @db.ObjectId
  size      String
  color     String
  stock     Int

  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
} 

model ProductImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  url       String

  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String      @db.ObjectId
  status           OrderStatus @default(PENDING)
  total_amount     Float
  shipping_address String
  payment_method   PaymentMethod
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  user             User        @relation(fields: [user_id], references: [id])
  orderItems       OrderItem[]
}

model OrderItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  order_id   String  @db.ObjectId
  product_id String  @db.ObjectId
  quantity   Int
  price      Float
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
}

model CartItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String  @db.ObjectId
  product_id String  @db.ObjectId
  quantity   Int
  user       User    @relation(fields: [user_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
}

model Wishlist {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String  @db.ObjectId
  product_id String  @db.ObjectId
  user       User    @relation(fields: [user_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  title      String
  message    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model Report {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  data         Json
  generated_at DateTime @default(now())
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  target    String
  request   String
  createdAt DateTime @default(now())
  user      User     @relation("UserLogs", fields: [userId], references: [id])
}

model LogExternal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ip        String
  target    String
  request   String
  createdAt DateTime @default(now())
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  BCA
  MANDIRI
  BRI
}
